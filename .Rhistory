nsim <- 1
nsim <- 1
# create population
N <- 500000
x<-data.frame(matrix(nrow=500000,ncol=100))
set.seed(2022)
n_var <- 1:100
for(i in n_var){
x[,i]<-rnorm(n=N,mean=0,sd=1)
}
# define parameters
beta0 <- 0
beta1 <- 1
beta2 <- 1
beta3 <- 1
beta4 <- 1
beta5 <- 1
sigma <- 10
# define theta
Ey <- beta0 + beta1*x[,1] + beta2*x[,2] + beta3*x[,3] + beta4*x[,4] + beta5*x[,5]
y <- Ey + rnorm(nrow(x),0,sigma)
theta <- mean((y - Ey)^2)
# choose models
variables<-list(1:3,
1:5,
1:20,
1:100,
6:100)
# c(1,2),c(1:3),c(1:4),c(1:5),c(1:10),
# c(1:20),c(1:35),c(1:55),c(1:100),c(1,6:15),
# c(1,6:50),c(1,2,6:15),c(1,2,6:50),c(1:3,6:15),c(1:3,6:50),
# c(1:4,6:15),c(1:4,6:50),c(6:20),c(6:30),c(6:45),
# c(6:70),c(6:100))
# loop settings
n <- 1000
nsim <- 1000
k <- c(2, 10, 100, 500, 1000)
n_mod <- length(variables)
results <- array(NA, dim = c(nsim, length(k), n_mod))
mod <- list()
y_hat <- matrix(nrow = n, ncol = n_mod)
# load glmnet
library(glmnet)
# create objects
best.lam <- c()
mod <- list()
predictions <- c()
# loop 1
set.seed(2022)
for(j in 1:nsim){
ind <- sample(1:N, n, replace = FALSE)
#dat <- as.matrix(data.frame(Y = y[ind],x[ind,]))
for(l in 1:length(k)){ # choose lth fold number to test
fold <- sample(1:k[l], n, replace = TRUE)
for(i in 1:k[l]){ # outer cv loop
for(m in 1:n_mod){print(c(j, l, i, m))
best.lam[m] <- cv.glmnet(x[, variables[[m]]], y[fold != i], alpha = 1, folds = 5)$lambda.min # inner cv loop
mod[[m]] <- glmnet(x[, variables[[m]]], y[fold != i, ], alpha = 1, lambda = best.lam[m])
y_hat[m, ] <- predict(mod[[m]], x[, variables[[m]]])
}
}
for(m in 1:n_mod){
results[j, l, m] <- mean((j[, 1] - dat[, p])^2)
}
}
}
dim(x)
sample(1:k[l], n, replace = TRUE)
y[ind][fold != i]
# create population
N <- 500000
x<-data.frame(matrix(nrow=500000,ncol=100))
set.seed(2022)
n_var <- 1:100
for(i in n_var){
x[,i]<-rnorm(n=N,mean=0,sd=1)
}
# define parameters
beta0 <- 0
beta1 <- 1
beta2 <- 1
beta3 <- 1
beta4 <- 1
beta5 <- 1
sigma <- 10
# define theta
Ey <- beta0 + beta1*x[,1] + beta2*x[,2] + beta3*x[,3] + beta4*x[,4] + beta5*x[,5]
y <- Ey + rnorm(nrow(x),0,sigma)
theta <- mean((y - Ey)^2)
# choose models
variables<-list(1:3,
1:5,
1:20,
1:100,
6:100)
# c(1,2),c(1:3),c(1:4),c(1:5),c(1:10),
# c(1:20),c(1:35),c(1:55),c(1:100),c(1,6:15),
# c(1,6:50),c(1,2,6:15),c(1,2,6:50),c(1:3,6:15),c(1:3,6:50),
# c(1:4,6:15),c(1:4,6:50),c(6:20),c(6:30),c(6:45),
# c(6:70),c(6:100))
# loop settings
n <- 1000
nsim <- 1
k <- c(2, 10, 100, 500, 1000)
n_mod <- length(variables)
results <- array(NA, dim = c(nsim, length(k), n_mod))
mod <- list()
y_hat <- matrix(nrow = n, ncol = n_mod)
# load glmnet
library(glmnet)
# create objects
best.lam <- c()
mod <- list()
predictions <- c()
# loop 1
set.seed(2022)
for(j in 1:nsim){
ind <- sample(1:N, n, replace = FALSE)
#dat <- as.matrix(data.frame(Y = y[ind],x[ind,]))
for(l in 1:length(k)){ # choose lth fold number to test
fold <- sample(1:k[l], n, replace = TRUE)
for(i in 1:k[l]){ # outer cv loop
for(m in 1:n_mod){print(c(j, l, i, m))
best.lam[m] <- cv.glmnet(x[ind, variables[[m]]], y[ind][fold != i], alpha = 1, folds = 5)$lambda.min # inner cv loop
mod[[m]] <- glmnet(x[ind, variables[[m]]], y[ind][fold != i, ], alpha = 1, lambda = best.lam[m])
y_hat[m, ] <- predict(mod[[m]], x[ind, variables[[m]]])
}
}
for(m in 1:n_mod){
results[j, l, m] <- mean((j[, 1] - dat[, p])^2)
}
}
}
dim(x[ind, variables[[m]]])
variables[[m]]
dim(x[ind, variables[[m]]][fold != i,])
length(y[ind][fold != i])
best.lam[m] <- cv.glmnet(x[ind, variables[[m]]][fold != i,], y[ind][fold != i], alpha = 1, folds = 5)$lambda.min # inner cv loop
class(x[ind, variables[[m]]][fold != i,])
best.lam[m] <- cv.glmnet(as.matrix(x[ind, variables[[m]]][fold != i,]), y[ind][fold != i], alpha = 1, folds = 5)$lambda.min # inner cv loop
best.lam[m] <- cv.glmnet(as.matrix(x[ind, variables[[m]]][fold != i,]), y[ind][fold != i], alpha = 1, folds = 5)$lambda.min # inner cv loop
best.lam[m]
mod[[m]] <- glmnet(as.matrix(x[ind, variables[[m]]][fold != i,]), y[ind][fold != i, ], alpha = 1, lambda = best.lam[m])
dim(x[ind, variables[[m]]][fold != i,])
length(y[ind][fold != i, ])
mod[[m]] <- glmnet(as.matrix(x[ind, variables[[m]]][fold != i,]), y[ind][fold != i], alpha = 1, lambda = best.lam[m])
mod[[m]]
y_hat[m, ] <- predict(mod[[m]], x[ind, variables[[m]]][fold == i,])
y_hat[m, ] <- predict(mod[[m]], as.matrix(x[ind, variables[[m]]][fold == i,]))
predict(mod[[m]], as.matrix(x[ind, variables[[m]]][fold == i,]))
dim(predict(mod[[m]], as.matrix(x[ind, variables[[m]]][fold == i,])))
y_hat[fold == i,m] <- predict(mod[[m]], as.matrix(x[ind, variables[[m]]][fold == i,]))
y_hat
for(m in 1:n_mod){print(c(j, l, i, m))
best.lam[m] <- cv.glmnet(as.matrix(x[ind, variables[[m]]][fold != i,]), y[ind][fold != i], alpha = 1, folds = 5)$lambda.min # inner cv loop
mod[[m]] <- glmnet(as.matrix(x[ind, variables[[m]]][fold != i,]), y[ind][fold != i], alpha = 1, lambda = best.lam[m])
y_hat[fold == i,m] <- predict(mod[[m]], as.matrix(x[ind, variables[[m]]][fold == i,]))
}
y_hat
dim(yhat)
for(i in 1:k[l]){ # outer cv loop
for(m in 1:n_mod){print(c(j, l, i, m))
best.lam[m] <- cv.glmnet(as.matrix(x[ind, variables[[m]]][fold != i,]), y[ind][fold != i], alpha = 1, folds = 5)$lambda.min # inner cv loop
mod[[m]] <- glmnet(as.matrix(x[ind, variables[[m]]][fold != i,]), y[ind][fold != i], alpha = 1, lambda = best.lam[m])
y_hat[fold == i,m] <- predict(mod[[m]], as.matrix(x[ind, variables[[m]]][fold == i,]))
}
}
y_hat
dim(yhat)
dim(y_hat)
for(m in 1:n_mod){
results[j, l, m] <- mean((j[, 1] - dat[, p])^2)
}
apply(y_hat, 2, )
mse
length(y)
y[ind]
dim(y_hat)
(y[ind] - y_hat[, m])^2
mean((y[ind] - y_hat[, m])^2)
for(m in 1:n_mod){
results[j, l, m] <- mean((y[ind] - y_hat[, m])^2)
}
results
results[1,1,1]
k[1]
variables[[1]]
results[1,1,2]
results[1,1,]
results[1,,]
10^2
variables<-list(1:3, 1:5, 1:20, 1:100, 6:100)
variables
out <- readRDS("~/Dropbox/research/optimal_k/results/parallel_simulation_lasso_output.rds")
out <- readRDS("~/Dropbox/optimal_k/results/parallel_simulation_lasso_output.rds")
out <- readRDS("/Users/gregorymatthews/Dropbox/optimal_k/results/parallel_simulation_lasso_output.rds")
out <- readRDS("/Users/gregorymatthews/Dropbox/optimal_k/results/parallel_simulation_lasso_output copy.rds")
theta.hat <- mse.hat <- array(unlist(out), dim = c(length(k), n_mod, nsim))
variables<-list(1:3, 1:5, 1:20, 1:100, 6:100)
n <- 1000
nsim <- 1000
k <- c(2, 10, 100, 500, 1000)
n_mod <- length(variables)
theta.hat <- mse.hat <- array(unlist(out), dim = c(length(k), n_mod, nsim))
dim(theta.hat )
biassq <- (apply(theta.hat, 3, mean) - theta)^2
# create population
N <- 500000
x<-data.frame(matrix(nrow=500000,ncol=100))
set.seed(2022)
n_var <- 1:100
for(i in n_var){
x[,i]<-rnorm(n=N,mean=0,sd=1)
}
# define parameters
beta0 <- 0
beta1 <- 1
beta2 <- 1
beta3 <- 1
beta4 <- 1
beta5 <- 1
sigma <- 10
# define theta
Ey <- beta0 + beta1*x[,1] + beta2*x[,2] + beta3*x[,3] + beta4*x[,4] + beta5*x[,5]
y <- Ey + rnorm(nrow(x),0,sigma)
theta <- mean((y - Ey)^2)
theta
biassq <- (apply(theta.hat, 3, mean) - theta)^2
biassq
biassq <- (apply(theta.hat, c(1,2), mean) - theta)^2
biassq
biassq <- (apply(theta.hat, c(2, 3), mean) - theta)^2
dim(biassq )
biassq <- (apply(theta.hat, c(1,2), mean) - theta)^2
var <- apply(theta.hat, c(1,2), var)
mse <- apply((theta.hat - theta)^2, c(1,2), mean)
library(plotrix)
plot(k, biassq[, 1], type = "b", ylim = c(0, 400), ylab = "bias^2")
points(k, biassq[, 2], type = "b", col = "blue")
points(k, biassq[, 3], type = "b", col = "red")
points(k, biassq[, 4], type = "b", col = "purple")
points(k, biassq[, 5], type = "b", col = "green")
legend(600, 250, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, var[, 1], type = "b", ylim = c(0, 10), ylab = "var")
points(k, var[, 2], type = "b", col = "blue")
points(k, var[, 3], type = "b", col = "red")
points(k, var[, 4], type = "b", col = "purple")
points(k, var[, 5], type = "b", col = "green")
legend(600, 8, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, biassq[, 1], type = "b", ylim = c(0, 400), ylab = "bias^2")
points(k, biassq[, 2], type = "b", col = "blue")
points(k, biassq[, 3], type = "b", col = "red")
points(k, biassq[, 4], type = "b", col = "purple")
points(k, biassq[, 5], type = "b", col = "green")
legend(600, 250, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, biassq[, 1], type = "b", ylab = "bias^2")
points(k, biassq[, 2], type = "b", col = "blue")
points(k, biassq[, 3], type = "b", col = "red")
points(k, biassq[, 4], type = "b", col = "purple")
points(k, biassq[, 5], type = "b", col = "green")
legend(600, 250, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, biassq[, 1], type = "b", ylim = c(0, 10), ylab = "bias^2")
points(k, biassq[, 2], type = "b", col = "blue")
points(k, biassq[, 3], type = "b", col = "red")
points(k, biassq[, 4], type = "b", col = "purple")
points(k, biassq[, 5], type = "b", col = "green")
legend(600, 250, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, biassq[, 1], type = "b", ylim = c(0, 100), ylab = "bias^2")
points(k, biassq[, 2], type = "b", col = "blue")
points(k, biassq[, 3], type = "b", col = "red")
points(k, biassq[, 4], type = "b", col = "purple")
points(k, biassq[, 5], type = "b", col = "green")
legend(600, 250, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, biassq[, 1], type = "b", ylim = c(0, 40), ylab = "bias^2")
points(k, biassq[, 2], type = "b", col = "blue")
points(k, biassq[, 3], type = "b", col = "red")
points(k, biassq[, 4], type = "b", col = "purple")
points(k, biassq[, 5], type = "b", col = "green")
legend(600, 250, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
legend(200, 30, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
legend(200, 20, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, biassq[, 1], type = "b", ylim = c(0, 40), ylab = "bias^2")
points(k, biassq[, 2], type = "b", col = "blue")
points(k, biassq[, 3], type = "b", col = "red")
points(k, biassq[, 4], type = "b", col = "purple")
points(k, biassq[, 5], type = "b", col = "green")
legend(200, 20, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, var[, 1], type = "b", ylab = "var")
points(k, var[, 2], type = "b", col = "blue")
points(k, var[, 3], type = "b", col = "red")
points(k, var[, 4], type = "b", col = "purple")
points(k, var[, 5], type = "b", col = "green")
legend(600, 8, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, var[, 1], type = "b", ylim = c(0, 20), ylab = "var")
points(k, var[, 2], type = "b", col = "blue")
points(k, var[, 3], type = "b", col = "red")
points(k, var[, 4], type = "b", col = "purple")
points(k, var[, 5], type = "b", col = "green")
legend(600, 8, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, var[, 1], type = "b", ylim = c(0, 40), ylab = "var")
points(k, var[, 2], type = "b", col = "blue")
points(k, var[, 3], type = "b", col = "red")
points(k, var[, 4], type = "b", col = "purple")
points(k, var[, 5], type = "b", col = "green")
legend(600, 8, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, var[, 1], type = "b", ylim = c(15, 25), ylab = "var")
points(k, var[, 2], type = "b", col = "blue")
points(k, var[, 3], type = "b", col = "red")
points(k, var[, 4], type = "b", col = "purple")
points(k, var[, 5], type = "b", col = "green")
legend(200, 20, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
legend(200, 15, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
legend(200, 17, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, var[, 1], type = "b", ylim = c(15, 25), ylab = "var")
points(k, var[, 2], type = "b", col = "blue")
points(k, var[, 3], type = "b", col = "red")
points(k, var[, 4], type = "b", col = "purple")
points(k, var[, 5], type = "b", col = "green")
legend(200, 17, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, mse[, 1], type = "b", ylim = c(0, 400), ylab = "MSE")
plot(k, mse[, 1], type = "b", ylim = c(0, 100), ylab = "MSE")
points(k, mse[, 2], type = "b", col = "blue")
points(k, mse[, 3], type = "b", col = "red")
points(k, mse[, 4], type = "b", col = "purple")
points(k, mse[, 5], type = "b", col = "green")
legend(600, 250, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, mse[, 1], type = "b", ylim = c(0, 600), ylab = "MSE")
points(k, mse[, 2], type = "b", col = "blue")
points(k, mse[, 3], type = "b", col = "red")
points(k, mse[, 4], type = "b", col = "purple")
points(k, mse[, 5], type = "b", col = "green")
legend(600, 250, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
# MSE plot
plot(k, mse[, 1], type = "b", ylim = c(0, 60), ylab = "MSE")
points(k, mse[, 2], type = "b", col = "blue")
points(k, mse[, 3], type = "b", col = "red")
points(k, mse[, 4], type = "b", col = "purple")
points(k, mse[, 5], type = "b", col = "green")
legend(600, 250, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
legend(200, 5, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
legend(200, 10, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, mse[, 1], type = "b", ylim = c(0, 60), ylab = "MSE")
points(k, mse[, 2], type = "b", col = "blue")
points(k, mse[, 3], type = "b", col = "red")
points(k, mse[, 4], type = "b", col = "purple")
points(k, mse[, 5], type = "b", col = "green")
legend(200, 10, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, biassq[, 1], type = "b", ylim = c(0, 40), ylab = "bias^2")
points(k, biassq[, 2], type = "b", col = "blue")
points(k, biassq[, 3], type = "b", col = "red")
points(k, biassq[, 4], type = "b", col = "purple")
points(k, biassq[, 5], type = "b", col = "green")
legend(200, 20, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, var[, 1], type = "b", ylim = c(15, 25), ylab = "var")
points(k, var[, 2], type = "b", col = "blue")
points(k, var[, 3], type = "b", col = "red")
points(k, var[, 4], type = "b", col = "purple")
points(k, var[, 5], type = "b", col = "green")
legend(200, 17, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, mse[, 1], type = "b", ylim = c(0, 60), ylab = "MSE")
points(k, mse[, 2], type = "b", col = "blue")
points(k, mse[, 3], type = "b", col = "red")
points(k, mse[, 4], type = "b", col = "purple")
points(k, mse[, 5], type = "b", col = "green")
legend(200, 10, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
plot(k, var[, 1], type = "b", ylim = c(15, 25), ylab = "var")
points(k, var[, 2], type = "b", col = "blue")
points(k, var[, 3], type = "b", col = "red")
points(k, var[, 4], type = "b", col = "purple")
points(k, var[, 5], type = "b", col = "green")
legend(200, 17, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
var
plot(k, biassq[, 1], type = "b", ylim = c(0, 40), ylab = "bias^2")
points(k, biassq[, 2], type = "b", col = "blue")
points(k, biassq[, 3], type = "b", col = "red")
points(k, biassq[, 4], type = "b", col = "purple")
points(k, biassq[, 5], type = "b", col = "green")
legend(200, 20, legend=c("1:3", "1:5", "1:20", "1:100", "6:100"),
col=c("black", "blue", "red", "purple", "green"), lty = 1, cex = 0.8)
results <- matrix(nrow = 1000, ncol = 5)
for(sim in 1:1000){
results[sim, ] <- apply(theta.hat[,, sim], 1, which.min)
}
results
dim(results)
corrects <- colSums(results == 2)
plot(k, corrects, type = "b", ylab = "How many times correct model had lowest MSE")
plot(k, corrects, type = "b", ylab = "How many times correct model had lowest MSE")
